service: converter-backend

custom:
  stage: ${opt:stage, self:provider.stage}
  tableName: ${self:custom.stage}-ExchangeRatesTable

provider:
  name: aws
  runtime: nodejs8.10
  versionFunctions: false
  memorySize: 128
  region: us-east-1
  logRetentionInDays: 30
  stage: dev
  environment:
    FIXER_API_KEY: ${env:FIXER_API_KEY, file(.env.yml):FIXER_API_KEY}
    TABLENAME: ${self:custom.tableName}
  iamRoleStatements:
    - Effect: 'Allow'
      Action:
        - dynamodb:Scan
        - dynamodb:PutItem
      Resource:
        Fn::GetAtt:
          - ExchangeRatesTable
          - Arn

functions:
  updateExchangeRates:
    handler: lambda/updateExchangeRatesCache.updateExchangeRatesCache
    name: ${self:custom.stage}-updateExchangeRatesCache
    description: 'Updates the latest exchange rates from fixer and stores them in ${self:custom.tableName}, triggered hourly'
    events:
      - schedule:
          name: ${self:custom.stage}-updateExchangeRatesCacheHourly
          description: 'Triggers the ${self:custom.stage}-updateExchangeRatesCache function hourly, to update the exchange rates and cache them in ${self:custom.tableName}'
          rate: rate(1 hour)
  updateCurrencySymbolsCache:
    handler: lambda/updateCurrencySymbolsCache.updateCurrencySymbolsCache
    name: ${self:custom.stage}-updateCurrencySymbolsCache
    description: 'Updates the currency symbols cache in ${self:custom.tableName}'
    events:
      - schedule:
          name: ${self:custom.stage}-updateCurrencySymbolsCache
          description: 'Triggers the ${self:custom.stage}-updateCurrencySymbolsCache function every 6 hours.'
          rate: rate(6 hours)
  getCachedData:
    handler: lambda/getCachedData.getCachedData
    name: ${self:custom.stage}-getCachedData
    description: 'Gets the exchange rates from ${self:custom.tableName}'
    events:
      - http:
          path: /${self:custom.stage}-exchangerates
          method: get
          cors: true

resources:
  Resources:
    ExchangeRatesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.tableName}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

package:
  include:
    - ../node_modules/node-fetch/**
